{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","views/Home.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","paddingLeft","fontSize","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","create","host","port","protocol","Paragraph","Account","useBurner","mainnetProvider","userSigner","localProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","push","marginLeft","marginTop","shape","type","display","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","width","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","useCallback","funcResponse","useEffect","span","textAlign","opacity","paddingRight","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","key","buttons","title","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","seed","scale","margin","placeholder","autoComplete","event","suffix","txValueInput","addonAfter","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","disabled","height","args","baseType","stateMutability","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","float","loading","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","transactionHash","blockNumber","Header","link","subTitle","defaultProps","createProvider","url","p","providers","StaticJsonRpcProvider","ready","Select","Option","Swap","ThemeSwitcher","localStorage","getItem","isDarkMode","setIsDarkMode","switcher","themes","setItem","position","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","zIndex","top","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Home","bPDelegate","yourMainnetBalance","readContracts","writeContracts","amount","setAmount","queryParams","URLSearchParams","search","validatorAddress","get","validatorName","border","amountONE","bPStaking","update","status","gasUsed","gas","GithubOutlined","Subgraph","initialNetwork","DEBUG","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","setAddress","selectedNetwork","useLocation","urlArray","setProvider","handleProviders","race","_p","useStaticJsonRPC","clearCachedProvider","disconnect","setTimeout","reload","useUserProviderAndSigner","getAddress","newAddress","_network","deployedContracts","externalContracts","mainnetContracts","Web3Provider","code","reason","exact","path","flex","alignItems","left","align","gutter","process","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","DAI","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.bd65ba1a.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: \"https://api.s0.b.hmny.io\",\n    gasPrice: 30000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: \"https://api.harmony.one\",\n    gasPrice: 30000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {/* <Blockies seed={address.toLowerCase()} size={8} scale={2} /> */}\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        {/* <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} /> */}\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/**\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(2);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        //setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\n//import { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = false;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        //dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"30\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Delegation Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 2000); //500\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n        notification.info({\n          message: \"Transaction Mined\",\n\n          placement: \"bottomRight\",\n        });\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","//import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Authereum from \"authereum\";\n//import Fortmatic from \"fortmatic\";\n//import WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID, NETWORKS } from \"../constants\";\n\n// Coinbase walletLink init\n// const walletLink = new WalletLink({\n//   appName: \"coinbase\",\n// });\n\n// WalletLink provider\n // const walletLinkProvider = walletLink.makeWeb3Provider(\"https://api.harmony.one\", 1666600000);\n\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n\n    network: \"mainnet\", // Optional.\n    cacheProvider: true, // optional\n    theme: \"dark\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n\n      // walletconnect: {\n      //   package: WalletConnectProvider, // required\n      //   options: {\n      //     bridge: \"https://bridge.walletconnect.org\",\n      //     infuraId: \"\",\n      //     qrcode: true,\n      //     chainId: 1666600000,\n      //     rpc: {\n      //\n      //\n      //\n      //\n      //       1666600000 : \"https://api.harmony.one\",\n      //     },\n      //   },\n      // },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport QR from \"qrcode.react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/**\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          type={minimized ? \"default\" : \"primary\"}   //  too many people just defaulting to MM and having a bad time\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n        {/*  <Balance address={address} provider={localProvider} price={price} /> */}\n\n        </>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          {/*  <Balance address={address} provider={localProvider} price={price} /> */}\n        </>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n          {/*  <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          /> */}\n        </>\n      ) : (\n        <></>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { List , Spin } from \"antd\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport Address from \"./Address\";\n\n/**\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"YourContract\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n**/\n\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\n  // 📟 Listen for broadcast events\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\n\n  return (\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n      <h2>Txs:</h2>\n      <List\n        bordered\n        dataSource={events}\n        renderItem={item => {\n          return (\n            <List.Item key={item.blockNumber + \"_\" + item.args[1]}>\n                Delegation <span> </span>\n                {item.args[1] ? \"Success\" : \"Failed\"} @ {<a href={\"https://explorer.harmony.one/tx/\" + item.transactionHash} target=\"_blank\">{item.transactionHash}</a>}\n              </List.Item>\n          );\n        }}\n      />\n\n    </div>\n\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header({link, title, subTitle}) {\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title={title}\n        subTitle={subTitle}\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n\n\nHeader.defaultProps = {\n  //link: \"\",\n  title: \"🏦 bP Staking\",\n  subTitle: \"\",\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {/* {targetNetwork.name} */}\n      </div>\n    );\n  }\n\n  //console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button, Card, Divider, Input, Spin, Switch} from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined , GithubOutlined } from \"@ant-design/icons\";\n\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function Home({\n  bPDelegate,\n  address,\n  mainnetProvider,\n//  localProvider,\n//  yourLocalBalance,\n  yourMainnetBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\nconst [amount, setAmount] = useState(\"0\");\nconst queryParams = new URLSearchParams(window.location.search);\nvar validatorAddress = queryParams.get(\"VA\");\nvar validatorName = queryParams.get(\"name\");\nif (validatorAddress === null) {\n  var validatorAddress = \"0x08c4596b157eafae5ec4e0fe629005bab2a10c3d\"\n}\nif ( validatorName === null){\n  var validatorName = \"Maffaz.ONE\"\n}\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 32 }}>\n       <h2>Delegate:</h2>\n       <h4>Amount: {amount} ONE</h4>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input placeholder=\"Input Amount > 100\" style={{ \"width\":\"80%\" , \"textAlign\":\"center\" }}\n            onChange={e => {\n              setAmount(e.target.value);\n            }}\n          />\n          <Button\n            type={\"primary\"}\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const amountONE = utils.parseEther(amount)\n              const result = tx(writeContracts.bPStaking.bPDelegate( validatorAddress , amountONE), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Delegate to {validatorName}\n          </Button>\n        </div>\n        {/*<Divider />\n          Your Address: <span></span>\n          <Address address={address}  ensProvider={mainnetProvider}  fontSize={16} /> */}\n          <Divider />\n\n          {/* use utils.formatEther to display a BigNumber: */}\n          <h2>Balance: {yourMainnetBalance ? parseFloat(utils.formatEther(yourMainnetBalance)).toFixed(2) + \" ONE\" : \"...\"}</h2>\n          <Divider />\n          <a href=\"https://staking.harmony.one/welcome\" target=\"_blank\">Staking Portfolio</a>\n          <Divider />\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in YourContract.sol! )\n      */}\n      <Events\n        contracts={readContracts}\n        contractName=\"bPStaking\"\n        eventName=\"StakingPrecompileCalled\"\n\n        mainnetProvider={mainnetProvider}\n        startBlock={0}\n\n      />\n      <div>\n        <Spin />\n      </div>\n\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n        <Card>\n          Check out the{\" \"}\n          <a\n            href=\"https://github.com/bouncePassONE/labs/blob/main/contracts/bPStaking.sol\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            contract <GithubOutlined /> code\n          </a>\n        </Card>\n\n\n      </div>\n    </div>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  //useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.mainnetHarmony; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = false;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = false; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://api.harmony.one\", //mainnetHarmony\n  \"https://api.s0.t.hmny.io/\", //mainnetHarmony\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnetHarmony\", \"testnetHarmony\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  // const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = 30000000000; //changed\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, mainnetProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = mainnetProvider && mainnetProvider._network && mainnetProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  //const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(mainnetProvider, contractConfig); //switched from localProvider\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n\n  // keep track of a variable from the contract in the local React state:\n  //const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n    //  yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      //console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      //console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n      console.log(\"B blockExplorer\", gasPrice);\n\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    //yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    //myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  //const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n    <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n    {/*  <Menu style={{ textAlign: \"center\", marginTop: 40 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">delegate</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/debug\">\n          <Link to=\"/debug\">Debug Contracts</Link>\n        </Menu.Item>\n\n      </Menu> */}\n\n\n\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <Home\n          address={address}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n\n          gasPrice={gasPrice}\n\n          yourMainnetBalance={yourMainnetBalance}\n          /*price={price}*/\n          tx={tx}\n          writeContracts={writeContracts}\n          readContracts={readContracts}\n\n          />\n\n        <Switch>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          <Contract\n            name=\"bPStaking\"\n            /*price={price}*/\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\n          {USE_NETWORK_SELECTOR && (\n            <div style={{ marginRight: 20 }}>\n            {/*  <NetworkSwitch\n                networkOptions={networkOptions}\n                selectedNetwork={selectedNetwork}\n                setSelectedNetwork={setSelectedNetwork}\n              /> */}\n            </div>\n          )}\n          <Account\n\n            address={address}\n\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            /*price={price}*/\n            web3Modal={web3Modal}\n            loadWeb3Modal={loadWeb3Modal}\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\n            blockExplorer={blockExplorer}\n          />\n        </div>\n        {/*{yourLocalBalance.lte(ethers.BigNumber.from(\"0\"))}*/}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n\n\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://discord.gg/P6fP2VjdPw\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}